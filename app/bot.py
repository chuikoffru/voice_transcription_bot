import asyncio
import io
import logging
from typing import BinaryIO
import json

import aiohttp
from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart, Command
from aiogram.utils.keyboard import InlineKeyboardBuilder

from config import settings
from models import init_db, Usage, User, db, upsert_user, upsert_chat, upsert_user_chat
from llm_service import LLMService
from user_service import process_chat_message, replace_name_with_username
from peewee import fn

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log_level = logging.DEBUG if settings.DEBUG else logging.INFO
log_handlers = [logging.StreamHandler()]

if settings.DEBUG:
    log_handlers.append(logging.FileHandler("bot_debug.log"))
    log_format = "%(asctime)s - %(name)s - %(levelname)s - %(message)s"
else:
    log_format = "%(asctime)s - %(levelname)s - %(message)s"

logging.basicConfig(level=log_level, format=log_format, handlers=log_handlers)
logger = logging.getLogger(__name__)

if settings.DEBUG:
    logger.debug("Debug mode is enabled")

bot = Bot(token=settings.BOT_TOKEN)
dp = Dispatcher()
llm_service = LLMService(settings.DEEPSEEK_API_KEY)


# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –≤—Ö–æ–¥—è—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
@dp.update()
async def log_update(update):
    logger.debug(f"Received update: {update.dict()}")


async def download_voice_message(file: BinaryIO) -> bytes:
    logger.debug("Starting voice message download")
    try:
        content = file.read()
        logger.debug(
            f"Successfully downloaded voice message, size: {len(content)} bytes"
        )
        return content
    except Exception as e:
        logger.error(f"Error downloading voice message: {str(e)}", exc_info=True)
        raise


async def upload_audio_to_gladia(audio_content: bytes, filename: str) -> dict:
    logger.debug(f"Starting upload for file: {filename}")
    logger.debug(f"Audio content size: {len(audio_content)} bytes")

    headers = {
        "x-gladia-key": settings.GLADIA_API_KEY,
        "accept": "application/json",
    }

    try:
        form = aiohttp.FormData()
        form.add_field(
            "audio", audio_content, filename=filename, content_type="audio/ogg"
        )

        logger.debug("Headers for upload request:")
        logger.debug(json.dumps(headers, indent=2))

        async with aiohttp.ClientSession() as session:
            async with session.post(
                "https://api.gladia.io/v2/upload/", headers=headers, data=form
            ) as response:
                logger.debug(f"Upload response status: {response.status}")
                response_text = await response.text()
                logger.debug(f"Upload response body: {response_text}")

                if response.status != 200:
                    logger.error(f"Upload failed with status {response.status}")
                    logger.error(f"Response: {response_text}")
                    return {}

                return json.loads(response_text)
    except Exception as e:
        logger.error(f"Error during upload: {str(e)}", exc_info=True)
        return {}


async def transcribe_audio(audio_url: str) -> dict:
    logger.debug(f"Starting transcription for URL: {audio_url}")

    headers = {
        "x-gladia-key": settings.GLADIA_API_KEY,
        "accept": "application/json",
        "Content-Type": "application/json",
    }

    data = {
        "audio_url": audio_url,
        "language": "ru",
        "diarization": True,
    }

    try:
        logger.debug("Transcription request data:")
        logger.debug(json.dumps(data, indent=2))

        async with aiohttp.ClientSession() as session:
            async with session.post(
                "https://api.gladia.io/v2/transcription/", headers=headers, json=data
            ) as response:
                logger.debug(f"Transcription response status: {response.status}")
                response_text = await response.text()
                logger.debug(f"Transcription response body: {response_text}")

                if response.status not in [200, 201]:
                    logger.error(f"Transcription failed with status {response.status}")
                    logger.error(f"Response: {response_text}")
                    return {}

                return json.loads(response_text)
    except Exception as e:
        logger.error(f"Error during transcription: {str(e)}", exc_info=True)
        return {}


@dp.message(
    lambda message: message.text
    and not message.text.startswith("/")
    and not message.voice
    and not message.audio
)
async def handle_text(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–Ω–µ –∫–æ–º–∞–Ω–¥) –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö –∏ —á–∞—Ç–∞—Ö"""
    logger.debug(
        f"Received message type: text={bool(message.text)}, voice={bool(message.voice)}, audio={bool(message.audio)}"
    )
    logger.debug(
        f"Received text message from user {message.from_user.id} in chat {message.chat.id}"
    )
    try:
        with db:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ upsert –¥–ª—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å –ë–î
            user = upsert_user(message.from_user)
            chat = upsert_chat(message)
            upsert_user_chat(user, chat)
            logger.debug(
                f"Successfully processed message: user={user.id}, chat={chat.id}"
            )
    except Exception as e:
        logger.error(f"Error processing text message: {e}", exc_info=True)


async def get_transcription_result(result_url: str) -> dict:
    logger.debug(f"Starting to poll for results at URL: {result_url}")

    headers = {
        "x-gladia-key": settings.GLADIA_API_KEY,
        "accept": "application/json",
    }

    try:
        async with aiohttp.ClientSession() as session:
            while True:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω—ã–π URL, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–ª—É—á–∏–ª–∏ –æ—Ç API
                async with session.get(result_url, headers=headers) as response:
                    logger.debug(f"Poll response status: {response.status}")
                    response_text = await response.text()
                    logger.debug(f"Poll response body: {response_text}")

                    if response.status != 200:
                        logger.error(f"Polling failed with status {response.status}")
                        logger.error(f"Response: {response_text}")
                        raise Exception("Failed to get transcription result")

                    result = json.loads(response_text)

                    if result.get("status") == "done":
                        logger.debug("Transcription completed successfully")
                        return result
                    elif result.get("status") == "error":
                        logger.error("Transcription failed with error status")
                        raise Exception("Transcription failed")

                    logger.debug(f"Status: {result.get('status')}, waiting...")
                    await asyncio.sleep(1)
    except Exception as e:
        logger.error(f"Error getting transcription result: {str(e)}", exc_info=True)
        raise


@dp.message(CommandStart())
async def handle_start(message: types.Message):
    logger.info(f"Received /start command from user {message.from_user.id}")
    with db:
        user = upsert_user(message.from_user)
        logger.info(
            f"User {user.id} ({user.username or user.firstname}) started the bot"
        )

    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.\n"
        "üé§ –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –ø—Ä–µ–æ–±—Ä–∞–∑—É—é –µ–≥–æ –≤ —Ç–µ–∫—Å—Ç.\n"
        "üìä –ò—Å–ø–æ–ª—å–∑—É–π /stats –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è."
    )


@dp.message(Command("stats"))
async def handle_stats(message: types.Message):
    logger.info(f"Received /stats command from user {message.from_user.id}")
    try:
        with db:
            user = upsert_user(message.from_user)

            # –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            total_duration = (
                Usage.select(fn.SUM(Usage.duration))
                .join(User)
                .where(User.tg_id == message.from_user.id)
                .scalar()
                or 0
            )

            total_messages = (
                Usage.select()
                .join(User)
                .where(User.tg_id == message.from_user.id)
                .count()
            )

            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–π
            recent_usages = (
                Usage.select()
                .join(User)
                .where(User.tg_id == message.from_user.id)
                .order_by(Usage.created_at.desc())
                .limit(5)
            )

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            stats_message = (
                "üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:\n\n"
                f"üéØ –í—Å–µ–≥–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–π: {total_messages}\n"
                f"‚è± –û–±—â–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {total_duration:.1f} —Å–µ–∫.\n"
                f"‚åõÔ∏è –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {(total_duration / total_messages if total_messages else 0):.1f} —Å–µ–∫.\n"
            )

            if recent_usages:
                stats_message += "\nüîç –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏:\n"
                for usage in recent_usages:
                    chat_name = usage.chat.name or str(usage.chat.tg_chat_id)
                    chat_type = (
                        "–ª–∏—á–Ω–æ–º —á–∞—Ç–µ"
                        if usage.chat.tg_chat_id == message.from_user.id
                        else f"–≥—Ä—É–ø–ø–µ {chat_name}"
                    )
                    stats_message += (
                        f"- {usage.created_at.strftime('%Y-%m-%d %H:%M:%S')} "
                        f"–≤ {chat_type}: {usage.duration:.1f} —Å–µ–∫.\n"
                    )

            await message.answer(stats_message)

    except Exception as e:
        logger.error(f"Error getting stats: {e}", exc_info=True)
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")


@dp.message(lambda message: message.voice or message.audio)
async def handle_voice(message: types.Message):
    logger.info(
        f"Received {'voice' if message.voice else 'audio'} message from user {message.from_user.id}"
    )
    logger.debug(f"Message content: {message.dict()}")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏ —á–∞—Ç–µ
    try:
        with db:
            user = upsert_user(message.from_user)
            chat = upsert_chat(message)
            upsert_user_chat(user, chat)
            logger.debug(
                f"Successfully processed voice message metadata: user={user.id}, chat={chat.id}"
            )
    except Exception as e:
        logger.error(f"Error processing voice message metadata: {e}", exc_info=True)

    processing_msg = await message.reply("üéØ –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è...")

    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
        if message.voice:
            await processing_msg.edit_text("‚åõÔ∏è –ó–∞–≥—Ä—É–∑–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è...")
            file = await bot.get_file(message.voice.file_id)
            filename = f"{message.voice.file_id}.ogg"
            logger.debug(f"Voice message file_id: {message.voice.file_id}")
        else:
            file = await bot.get_file(message.audio.file_id)
            filename = message.audio.file_name or f"{message.audio.file_id}.ogg"
            logger.debug(f"Audio message file_id: {message.audio.file_id}")

        logger.debug(f"File path: {file.file_path}")

        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        file_content = io.BytesIO()
        await bot.download_file(file.file_path, file_content)
        file_content.seek(0)

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞—É–¥–∏–æ –Ω–∞ Gladia
        audio_content = await download_voice_message(file_content)
        await processing_msg.edit_text("üì§ –ó–∞–≥—Ä—É–∑–∫–∞ –∞—É–¥–∏–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä...")
        upload_response = await upload_audio_to_gladia(audio_content, filename)

        if not upload_response.get("audio_url"):
            logger.error("Failed to get audio_url from upload response")
            await processing_msg.edit_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞—É–¥–∏–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—é
        await processing_msg.edit_text("üîç –ù–∞—á–∏–Ω–∞—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—é...")
        transcription_response = await transcribe_audio(upload_response["audio_url"])

        if not transcription_response.get("result_url"):
            logger.error("Failed to get result_url from transcription response")
            await processing_msg.edit_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )
            return

        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        await processing_msg.edit_text("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏...")
        result = await get_transcription_result(transcription_response["result_url"])

        logger.debug(
            f"Final result: {json.dumps(result, indent=2, ensure_ascii=False)}"
        )

        if "result" in result and "transcription" in result["result"]:
            transcription = result["result"]["transcription"]
            full_text = transcription.get("full_transcript", "")

            # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            logger.info(f"Successfully transcribed audio. Full text: {full_text}")

            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            try:
                duration = (
                    result.get("result", {})
                    .get("metadata", {})
                    .get("audio_duration", 0)
                )
                with db:
                    user = upsert_user(message.from_user)
                    chat = upsert_chat(message)
                    upsert_user_chat(user, chat)
                    Usage.create(
                        user=user,
                        chat=chat,
                        message_id=message.message_id,
                        duration=duration,
                    )
                    logger.info(
                        f"Usage recorded: user={user.id} ({user.username or user.firstname}), "
                        f"chat_id={message.chat.id}, duration={duration}s"
                    )
            except Exception as e:
                logger.error(f"Failed to record usage: {e}", exc_info=True)

            try:
                # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ
                await processing_msg.delete()
            except Exception as e:
                logger.warning(f"Failed to delete processing message: {e}")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–º–µ–Ω–∞
            if len(full_text) > 4000:  # Telegram limit is 4096, using 4000 to be safe
                # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏
                parts = [
                    full_text[i : i + 4000] for i in range(0, len(full_text), 4000)
                ]
                # –ü–µ—Ä–≤—É—é —á–∞—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –æ—Ç–≤–µ—Ç –Ω–∞ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                first_msg = await message.reply(
                    f"‚ú® –ß–∞—Å—Ç—å 1/{len(parts)}:\n\n{parts[0]}"
                )
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–º–µ–Ω–∞ –≤ –ø–µ—Ä–≤–æ–π —á–∞—Å—Ç–∏
                await process_name_mentions(first_msg, parts[0])
                # –û—Å—Ç–∞–ª—å–Ω—ã–µ —á–∞—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –æ–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                for i, part in enumerate(parts[1:], 2):
                    msg = await message.answer(f"‚ú® –ß–∞—Å—Ç—å {i}/{len(parts)}:\n\n{part}")
                    await process_name_mentions(msg, part)
            else:
                msg = await message.reply(f"‚ú® –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è:\n\n{full_text}")
                await process_name_mentions(msg, full_text)
        else:
            logger.error(
                f"Failed to get transcription from result. Result structure: {json.dumps(result, indent=2, ensure_ascii=False)}"
            )
            await processing_msg.edit_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )

    except Exception as e:
        logger.error(f"Error processing voice message: {str(e)}", exc_info=True)
        error_message = (
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )
        try:
            await processing_msg.edit_text(error_message)
        except Exception:
            await message.reply(error_message)


@dp.callback_query(lambda c: c.data.startswith("select_user:"))
async def handle_user_selection(callback_query: types.CallbackQuery):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback
        _, found_name, username = callback_query.data.split(":")
        message = callback_query.message

        # –ò–∑–º–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        new_text = replace_name_with_username(message.text, found_name, username)
        
        logger.debug(f"Callback: replacing name '{found_name}' with @{username}")
        logger.debug(f"Callback: original text: {message.text}")
        logger.debug(f"Callback: modified text: {new_text}")

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        await message.edit_text(new_text)

        # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
        await callback_query.answer(f"–ò–º—è '{found_name}' –∑–∞–º–µ–Ω–µ–Ω–æ –Ω–∞ @{username}")
    except Exception as e:
        logger.error(f"Error handling user selection: {e}", exc_info=True)
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞")


async def process_name_mentions(message: types.Message, text: str) -> str:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏–º–µ–Ω –≤ —Ç–µ–∫—Å—Ç–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–∞—Ç–∞ –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –ø–æ–º–æ—â—å—é LLM
        found_name, matching_users = process_chat_message(message.chat.id, text, llm_service)

        logger.debug(f"Found name: {found_name}")
        logger.debug(f"Matching users: {matching_users}")

        if not found_name or not matching_users:
            return text

        if len(matching_users) == 1:
            # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω –æ–¥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, —Å—Ä–∞–∑—É –∑–∞–º–µ–Ω—è–µ–º –∏–º—è
            firstname, username, _ = matching_users[0]
            new_text = replace_name_with_username(text, found_name, username)
            logger.debug(f"Replacing name '{found_name}' with @{username}")
            logger.debug(f"Original text: {text}")
            logger.debug(f"Modified text: {new_text}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            await message.edit_text(new_text)
            return new_text
        else:
            # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞
            builder = InlineKeyboardBuilder()
            for firstname, username, _ in matching_users:
                builder.button(
                    text=f"{firstname} (@{username})",
                    callback_data=f"select_user:{found_name}:{username}",
                )
            builder.adjust(1)  # –ü–æ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–µ –≤ —Ä—è–¥

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
            await message.edit_text(text, reply_markup=builder.as_markup())
            return text
    except Exception as e:
        logger.error(f"Error processing name mentions: {e}", exc_info=True)
        return text


async def main():
    logger.info("Starting bot")
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        init_db()
        logger.info("Database initialized")

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        logger.debug("Registered handlers:")
        for handler in dp.message.handlers:
            logger.debug(f"- Handler with filter: {handler.callback}")

        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        logger.info("Starting polling...")
        await dp.start_polling(
            bot, allowed_updates=["message", "edited_message"], skip_updates=True
        )
    except Exception as e:
        logger.error(f"Error in main loop: {str(e)}", exc_info=True)
    finally:
        logger.info("Bot stopped")


if __name__ == "__main__":
    asyncio.run(main())
